/*
 * This file is generated by jOOQ.
 */
package jooq;


import jooq.tables.Auth;
import jooq.tables.FlywaySchemaHistory;
import jooq.tables.Note;
import jooq.tables.Users;
import jooq.tables.records.AuthRecord;
import jooq.tables.records.FlywaySchemaHistoryRecord;
import jooq.tables.records.NoteRecord;
import jooq.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthRecord> AUTH_PKEY = Internal.createUniqueKey(Auth.AUTH, DSL.name("auth_pkey"), new TableField[] { Auth.AUTH.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<NoteRecord> NOTE_PKEY = Internal.createUniqueKey(Note.NOTE, DSL.name("note_pkey"), new TableField[] { Note.NOTE.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_EMAIL_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_email_key"), new TableField[] { Users.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_USERNAME_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_username_key"), new TableField[] { Users.USERS.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AuthRecord, UsersRecord> AUTH__AUTH_ID_FKEY = Internal.createForeignKey(Auth.AUTH, DSL.name("auth_id_fkey"), new TableField[] { Auth.AUTH.ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<NoteRecord, UsersRecord> NOTE__NOTE_AUTHOR_ID_FKEY = Internal.createForeignKey(Note.NOTE, DSL.name("note_author_id_fkey"), new TableField[] { Note.NOTE.AUTHOR_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
}
