/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.Indexes;
import jooq.Keys;
import jooq.Public;
import jooq.enums.OrganizationRole;
import jooq.tables.records.UserOrganizationMembershipRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserOrganizationMembership extends TableImpl<UserOrganizationMembershipRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.user_organization_membership</code>
     */
    public static final UserOrganizationMembership USER_ORGANIZATION_MEMBERSHIP = new UserOrganizationMembership();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserOrganizationMembershipRecord> getRecordType() {
        return UserOrganizationMembershipRecord.class;
    }

    /**
     * The column <code>public.user_organization_membership.id</code>.
     */
    public final TableField<UserOrganizationMembershipRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.user_organization_membership.created</code>.
     */
    public final TableField<UserOrganizationMembershipRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.user_organization_membership.user_id</code>.
     */
    public final TableField<UserOrganizationMembershipRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>public.user_organization_membership.organization_id</code>.
     */
    public final TableField<UserOrganizationMembershipRecord, Integer> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.user_organization_membership.role</code>.
     */
    public final TableField<UserOrganizationMembershipRecord, OrganizationRole> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR.asEnumDataType(jooq.enums.OrganizationRole.class), this, "");

    private UserOrganizationMembership(Name alias, Table<UserOrganizationMembershipRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserOrganizationMembership(Name alias, Table<UserOrganizationMembershipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_organization_membership</code> table
     * reference
     */
    public UserOrganizationMembership(String alias) {
        this(DSL.name(alias), USER_ORGANIZATION_MEMBERSHIP);
    }

    /**
     * Create an aliased <code>public.user_organization_membership</code> table
     * reference
     */
    public UserOrganizationMembership(Name alias) {
        this(alias, USER_ORGANIZATION_MEMBERSHIP);
    }

    /**
     * Create a <code>public.user_organization_membership</code> table reference
     */
    public UserOrganizationMembership() {
        this(DSL.name("user_organization_membership"), null);
    }

    public <O extends Record> UserOrganizationMembership(Table<O> child, ForeignKey<O, UserOrganizationMembershipRecord> key) {
        super(child, key, USER_ORGANIZATION_MEMBERSHIP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.USER_ORGANIZATION_MEMBERSHIP_ORGANIZATION_ID, Indexes.USER_ORGANIZATION_MEMBERSHIP_ROLE, Indexes.USER_ORGANIZATION_MEMBERSHIP_USER_ID);
    }

    @Override
    public Identity<UserOrganizationMembershipRecord, Integer> getIdentity() {
        return (Identity<UserOrganizationMembershipRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserOrganizationMembershipRecord> getPrimaryKey() {
        return Keys.USER_ORGANIZATION_MEMBERSHIP_PKEY;
    }

    @Override
    public List<UniqueKey<UserOrganizationMembershipRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USER_ORGANIZATION_MEMBERSHIP_USER_ID_ORGANIZATION_ID_ROLE_KEY);
    }

    @Override
    public List<ForeignKey<UserOrganizationMembershipRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_ORGANIZATION_MEMBERSHIP__USER_ORGANIZATION_MEMBERSHIP_USER_ID_FKEY, Keys.USER_ORGANIZATION_MEMBERSHIP__USER_ORGANIZATION_MEMBERSHIP_ORGANIZATION_ID_FKEY);
    }

    private transient Users _users;
    private transient Organization _organization;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.USER_ORGANIZATION_MEMBERSHIP__USER_ORGANIZATION_MEMBERSHIP_USER_ID_FKEY);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>public.organization</code> table.
     */
    public Organization organization() {
        if (_organization == null)
            _organization = new Organization(this, Keys.USER_ORGANIZATION_MEMBERSHIP__USER_ORGANIZATION_MEMBERSHIP_ORGANIZATION_ID_FKEY);

        return _organization;
    }

    @Override
    public UserOrganizationMembership as(String alias) {
        return new UserOrganizationMembership(DSL.name(alias), this);
    }

    @Override
    public UserOrganizationMembership as(Name alias) {
        return new UserOrganizationMembership(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserOrganizationMembership rename(String name) {
        return new UserOrganizationMembership(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserOrganizationMembership rename(Name name) {
        return new UserOrganizationMembership(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, LocalDateTime, Integer, Integer, OrganizationRole> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
