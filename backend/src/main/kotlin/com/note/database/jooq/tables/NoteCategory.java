/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import jooq.Keys;
import jooq.Public;
import jooq.tables.records.NoteCategoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NoteCategory extends TableImpl<NoteCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.note_category</code>
     */
    public static final NoteCategory NOTE_CATEGORY = new NoteCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NoteCategoryRecord> getRecordType() {
        return NoteCategoryRecord.class;
    }

    /**
     * The column <code>public.note_category.id</code>.
     */
    public final TableField<NoteCategoryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.note_category.title</code>.
     */
    public final TableField<NoteCategoryRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.note_category.description</code>.
     */
    public final TableField<NoteCategoryRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    private NoteCategory(Name alias, Table<NoteCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private NoteCategory(Name alias, Table<NoteCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.note_category</code> table reference
     */
    public NoteCategory(String alias) {
        this(DSL.name(alias), NOTE_CATEGORY);
    }

    /**
     * Create an aliased <code>public.note_category</code> table reference
     */
    public NoteCategory(Name alias) {
        this(alias, NOTE_CATEGORY);
    }

    /**
     * Create a <code>public.note_category</code> table reference
     */
    public NoteCategory() {
        this(DSL.name("note_category"), null);
    }

    public <O extends Record> NoteCategory(Table<O> child, ForeignKey<O, NoteCategoryRecord> key) {
        super(child, key, NOTE_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<NoteCategoryRecord, Integer> getIdentity() {
        return (Identity<NoteCategoryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NoteCategoryRecord> getPrimaryKey() {
        return Keys.NOTE_CATEGORY_PKEY;
    }

    @Override
    public NoteCategory as(String alias) {
        return new NoteCategory(DSL.name(alias), this);
    }

    @Override
    public NoteCategory as(Name alias) {
        return new NoteCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NoteCategory rename(String name) {
        return new NoteCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NoteCategory rename(Name name) {
        return new NoteCategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
